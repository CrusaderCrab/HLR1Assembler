#include "catch.hpp"
#include "../InstructionGen.h"
#define rr REQUIRE
#define tt TEST_CASE
#define ss SECTION

namespace HLR1{

TEST_CASE("A and B generation", "[InstructionGen"){

    State s(0, 0);
    InstructionGen ig(s);
    SECTION("A Generation"){
        rr(ig.generateA(0x00, false, 0x00, 0x00, false, 0x0000) == 0);
        rr(ig.generateA(0x00, false, 0x00, 0x00, true,  0x0000) == 0x2000);
        rr(ig.generateA(0x00, false, 0x00, 0x00, false, 0x1FFF) == 0x1FFF);
        rr(ig.generateA(0x00, false, 0x00, 0x00, false, 0x0FFE) == 0x0FFE);
        rr(ig.generateA(0x00, false, 0x00, 0x00, true,  0x0FFE) == 0x2FFE);
        rr(ig.generateA(0x00, false, 0x00, 0x1F, false, 0x0000) == 0x0007C000);
        rr(ig.generateA(0x00, false, 0x00, 0x0E, false, 0x0000) == 0x00038000);
        rr(ig.generateA(0x00, false, 0x1F, 0x00, false, 0x0000) == 0x00F80000);
        rr(ig.generateA(0x00, false, 0x0E, 0x00, false, 0x0000) == 0x00700000);
        rr(ig.generateA(0x00, true,  0x00, 0x00, false, 0x0000) == 0x01000000);
        rr(ig.generateA(0x40, false, 0x00, 0x00, false, 0x0000) == 0x80000000);
        rr(ig.generateA(0x7F, false, 0x00, 0x00, false, 0x0000) == 0xFE000000);
        rr(ig.generateA(0x3E, false, 0x00, 0x00, false, 0x0000) == 0x7C000000);
    }
    SECTION(("B Generation")){
        rr(ig.generateB(0x00, false, 0x00, 0x00000) == 0x00000000);
        rr(ig.generateB(0x40, false, 0x00, 0x00000) == 0x80000000);
        rr(ig.generateB(0x7F, false, 0x00, 0x00000) == 0xFE000000);
        rr(ig.generateB(0x3E, false, 0x00, 0x00000) == 0x7C000000);
        rr(ig.generateB(0x00, true,  0x00, 0x00000) == 0x01000000);
        rr(ig.generateB(0x00, false, 0x1F, 0x00000) == 0x00F80000);
        rr(ig.generateB(0x00, false, 0x0E, 0x00000) == 0x00700000);
        rr(ig.generateB(0x00, false, 0x00, 0x7FFFF) == 0x0007FFFF);
        rr(ig.generateB(0x00, false, 0x00, 0x3F0FE) == 0x0003F0FE);
    }

}
}
